-- journal
create table journal(
    journal_id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    journal_title text,
    highlight_of_the_day text not null,
    mood varchar(255) not null,
    inserted_at timestamp with time zone default timezone('utc':: text, now()) not null
);

-- added is_deleted column
alter table journal
add column is_deleted boolean default false not null;

-- journal policy
alter table journal enable row level security;
create policy "Users can create Journals." on journal for
    insert with check (auth.uid() = user_id);
create policy "Users can view their own Journals." on journal for
    select using ((select auth.uid()) = user_id);
create policy "Users can update their own Journals." on journal for
    update using ((select auth.uid()) = user_id);
create policy "Users can delete their own Journals." on journal for
    delete using ((select auth.uid()) = user_id);


-- notes
create table notes(
    note_id bigint generated by default as identity primary key,
    user_id uuid references auth.users not null,
    note_title text not null,
    note_description text not null,
    is_important BOOLEAN NOT NULL default FALSE,
    is_archived BOOLEAN NOT NULL default FALSE, 
    inserted_at timestamp with time zone default timezone('utc':: text, now()) not null
);

-- note policy
alter table notes enable row level security;
create policy "Users can create Notes." on notes for
    insert with check (auth.uid() = user_id);
create policy "Users can view their own Notes." on notes for
    select using ((select auth.uid()) = user_id);
create policy "Users can update their own Notes." on notes for
    update using ((select auth.uid()) = user_id);
create policy "Users can delete their own Notes." on notes for
    delete using ((select auth.uid()) = user_id);

